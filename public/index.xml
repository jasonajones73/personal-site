<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JASON JONES on JASON JONES</title>
    <link>/</link>
    <description>Recent content in JASON JONES on JASON JONES</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Fri, 24 May 2019 21:13:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>#ELGL19 On Twitter: A Brief Synthesis</title>
      <link>/post/2019-05-24-elgl-twitter/</link>
      <pubDate>Fri, 24 May 2019 21:13:00 +0000</pubDate>
      
      <guid>/post/2019-05-24-elgl-twitter/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;the-boring-bits---hidden-but-viewable&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The Boring Bits - Hidden But Viewable&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)
library(tidytext)
library(kableExtra)

tweets &amp;lt;- read_rds(&amp;quot;data/tweets.rds&amp;quot;) %&amp;gt;%
  as_tibble()

f &amp;lt;- function(time) {
  x &amp;lt;- time
  hour(x) &amp;lt;- hour(x)-4
  return(x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hours-of-tweets&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;24 Hours of Tweets&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is_retweet == FALSE) %&amp;gt;%
  mutate(created_at = floor_date(created_at, unit = &amp;quot;hour&amp;quot;)) %&amp;gt;%
  mutate(created_at = f(created_at)) %&amp;gt;%
  group_by(created_at) %&amp;gt;%
  summarise(tweet_count = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  arrange(created_at) %&amp;gt;%
  mutate(running_total = cumsum(tweet_count)) %&amp;gt;%
  top_n(24, running_total) %&amp;gt;%
  ggplot(aes(created_at, running_total)) +
  geom_col(fill = &amp;quot;#112E51&amp;quot;) +
  geom_label(aes(label = scales::comma(running_total)), nudge_y = -50, size = 2) +
  scale_y_continuous(labels = scales::comma_format()) +
  labs(title = &amp;quot;New Tweets: #ELGL19&amp;quot;,
       caption = &amp;quot;Author: Jason Jones, @packpridejones&amp;quot;,
       x = NULL, y = NULL) +
  theme(panel.background = element_blank(),
        panel.grid.major.y = element_line(color = &amp;quot;light grey&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-24-elgl-twitter_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;retweets-are-tweets-too&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Retweets Are Tweets Too&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is_retweet == TRUE) %&amp;gt;%
  mutate(created_at = floor_date(created_at, unit = &amp;quot;hour&amp;quot;)) %&amp;gt;%
  mutate(created_at = f(created_at)) %&amp;gt;%
  group_by(created_at) %&amp;gt;%
  summarise(tweet_count = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  arrange(created_at) %&amp;gt;%
  mutate(running_total = cumsum(tweet_count)) %&amp;gt;%
  top_n(24, running_total) %&amp;gt;%
  ggplot(aes(created_at, running_total)) +
  geom_col(fill = &amp;quot;#FF7043&amp;quot;) +
  geom_label(aes(label = scales::comma(running_total)), nudge_y = -50, size = 2) +
  scale_y_continuous(labels = scales::comma_format()) +
  labs(title = &amp;quot;Retweets: #ELGL19&amp;quot;,
       caption = &amp;quot;Author: Jason Jones, @packpridejones&amp;quot;,
       x = NULL, y = NULL) +
  theme(panel.background = element_blank(),
        panel.grid.major.y = element_line(color = &amp;quot;light grey&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-24-elgl-twitter_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;biggest-fans&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Biggest Fans&lt;/h1&gt;
&lt;div id=&#34;most-original-tweets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Most Original Tweets&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is_retweet == FALSE) %&amp;gt;%
  group_by(screen_name) %&amp;gt;%
  summarise(tweets = n()) %&amp;gt;%
  arrange(desc(tweets)) %&amp;gt;%
  top_n(10, tweets) %&amp;gt;%
  kable(col.names = c(&amp;quot;Twitter ID&amp;quot;, &amp;quot;Tweet Count&amp;quot;)) %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Twitter ID
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Tweet Count
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
kwyatt23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
134
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
kowyatt
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TheBaconDiaries
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
acornsandnuts
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
RealMaggieJones
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
benkittelson56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
JBStephens1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Josh_Edwards11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
kimstric
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
77ccampbell
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
BarkmanSusan
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;cheering-section&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Cheering Section&lt;/h1&gt;
&lt;div id=&#34;most-retweets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Most Retweets&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is_retweet == TRUE) %&amp;gt;%
  group_by(screen_name) %&amp;gt;%
  summarise(tweets = n()) %&amp;gt;%
  arrange(desc(tweets)) %&amp;gt;%
  top_n(10, tweets) %&amp;gt;%
  kable(col.names = c(&amp;quot;Twitter ID&amp;quot;, &amp;quot;Retweet Count&amp;quot;)) %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Twitter ID
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Retweet Count
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ELGL50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
243
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SEELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
125
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
77ccampbell
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
MountainELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NWELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
kowyatt
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
danwein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
acornsandnuts
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
CALELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SWELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;enough-already&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Enough Already!&lt;/h1&gt;
&lt;div id=&#34;top-average-tweet-length&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Top Average Tweet Length&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is_retweet == FALSE) %&amp;gt;%
  group_by(screen_name) %&amp;gt;%
  summarise(avg_length = mean(display_text_width)) %&amp;gt;%
  top_n(15, avg_length) %&amp;gt;%
  ggplot(aes(reorder(screen_name, avg_length), avg_length)) +
  geom_col(fill = &amp;quot;#0095A8&amp;quot;) +
  coord_flip() +
  labs(title = &amp;quot;Average Tweet Length&amp;quot;,
       subtitle = &amp;quot;Top 15&amp;quot;,
       caption = &amp;quot;Author: Jason Jones, @packpridejones&amp;quot;,
       x = NULL, y = NULL) +
  theme(panel.background = element_blank(),
        panel.grid.major.x = element_line(color = &amp;quot;light grey&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-24-elgl-twitter_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;short-and-sweet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Short and Sweet&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is_retweet == FALSE) %&amp;gt;%
  group_by(screen_name) %&amp;gt;%
  summarise(avg_length = mean(display_text_width)) %&amp;gt;%
  top_n(-15, avg_length) %&amp;gt;%
  ggplot(aes(reorder(screen_name, desc(avg_length)), avg_length)) +
  geom_col(fill = &amp;quot;#0095A8&amp;quot;) +
  coord_flip() +
  labs(title = &amp;quot;Average Tweet Length&amp;quot;,
       subtitle = &amp;quot;Lowest 15&amp;quot;,
       caption = &amp;quot;Author: Jason Jones, @packpridejones&amp;quot;,
       x = NULL, y = NULL) +
  theme(panel.background = element_blank(),
        panel.grid.major.x = element_line(color = &amp;quot;light grey&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-24-elgl-twitter_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;popular-kids&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Popular Kids&lt;/h1&gt;
&lt;div id=&#34;who-gets-the-most-replies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Who gets the most replies?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is.na(reply_to_screen_name) != TRUE) %&amp;gt;%
  group_by(reply_to_screen_name) %&amp;gt;%
  summarise(tweets = n()) %&amp;gt;%
  arrange(desc(tweets)) %&amp;gt;%
  top_n(10, tweets) %&amp;gt;%
  kable(col.names = c(&amp;quot;Twitter ID&amp;quot;, &amp;quot;Reply Count&amp;quot;)) %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Twitter ID
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Reply Count
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
kwyatt23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Josh_Edwards11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
acornsandnuts
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TheBaconDiaries
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
BarkmanSusan
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
kowyatt
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
novalsi
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
marcemars
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
benkittelson56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ELGL50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
hanaschank
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
libraryhillary
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;iphone-or-android&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;iPhone or Android?&lt;/h1&gt;
&lt;div id=&#34;twitter-tool-of-choice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Twitter tool of choice&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(is_retweet == FALSE) %&amp;gt;%
  group_by(source) %&amp;gt;%
  summarise(Count = n()) %&amp;gt;%
  arrange(desc(Count)) %&amp;gt;%
  top_n(10, Count) %&amp;gt;%
  kable() %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
source
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Count
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Twitter for iPhone
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
866
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Twitter for Android
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
353
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Twitter Web Client
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Twitter Web App
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Twitter for iPad
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Instagram
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
HubSpot
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
IFTTT
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
LinkedIn
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Sprout Social
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;stealing-thunder&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Stealing Thunder?&lt;/h1&gt;
&lt;div id=&#34;retweet-has-more-favorites-than-original-tweet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Retweet has more favorites than original tweet&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(favorite_count &amp;lt; retweet_favorite_count) %&amp;gt;%
  group_by(screen_name) %&amp;gt;%
  summarise(thunder_stolen = n()) %&amp;gt;%
  arrange(desc(thunder_stolen)) %&amp;gt;%
  top_n(10, thunder_stolen) %&amp;gt;%
  kable(col.names = c(&amp;quot;Screen Name&amp;quot;, &amp;quot;Count Of Thunder Steals&amp;quot;)) %&amp;gt;%
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Screen Name
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Count Of Thunder Steals
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ELGL50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
238
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SEELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
121
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
77ccampbell
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
MountainELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
NWELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
57
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
kowyatt
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
danwein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
acornsandnuts
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
CALELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
MidwestELGL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;language-is-important&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Language Is Important&lt;/h1&gt;
&lt;div id=&#34;scoring-tweets-by-language-sentiment&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Scoring Tweets by Language Sentiment&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tweets %&amp;gt;%
  filter(created_at &amp;gt; as.POSIXct(&amp;quot;2019-05-15 23:59:59&amp;quot;)) %&amp;gt;%
  mutate(index = row_number()) %&amp;gt;%
  unnest_tokens(&amp;quot;word&amp;quot;, text) %&amp;gt;%
  select(index, created_at, screen_name, word) %&amp;gt;%
  anti_join(stop_words) %&amp;gt;%
  mutate(created_at = floor_date(created_at, unit = &amp;quot;hour&amp;quot;)) %&amp;gt;%
  mutate(created_at = f(created_at)) %&amp;gt;%
  inner_join(get_sentiments(lexicon = &amp;quot;afinn&amp;quot;)) %&amp;gt;%
  group_by(created_at) %&amp;gt;%
  summarise(score = sum(score)) %&amp;gt;%
  ungroup() %&amp;gt;%
  arrange(created_at) %&amp;gt;%
  mutate(sent_flow = cumsum(score)) %&amp;gt;%
  ggplot(aes(created_at, sent_flow)) +
  geom_line() +
  geom_point(color = &amp;quot;#FF7043&amp;quot;, size = 3) +
  scale_y_continuous(labels = scales::comma_format()) +
  labs(title = &amp;quot;#ELGL19: Twitter Cumulative Sentiment&amp;quot;,
       subtitle = &amp;quot;Y&amp;#39;all Some Positive People!&amp;quot;,
       caption = &amp;quot;Author: Jason Jones, @packpridejones&amp;quot;,
       x = NULL, y = NULL) +
  theme(panel.background = element_blank(),
        panel.grid.major.y = element_line(color = &amp;quot;light grey&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-24-elgl-twitter_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;most-used-words&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Most Used Words&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sentiment &amp;lt;- tweets %&amp;gt;%
  filter(created_at &amp;gt; as.POSIXct(&amp;quot;2019-05-15 23:59:59&amp;quot;)) %&amp;gt;%
  mutate(index = row_number()) %&amp;gt;%
  unnest_tokens(&amp;quot;word&amp;quot;, text) %&amp;gt;%
  select(index, created_at, screen_name, word) %&amp;gt;%
  anti_join(stop_words) %&amp;gt;%
  mutate(created_at = floor_date(created_at, unit = &amp;quot;hour&amp;quot;)) %&amp;gt;%
  mutate(created_at = f(created_at)) %&amp;gt;%
  inner_join(get_sentiments(lexicon = &amp;quot;bing&amp;quot;)) %&amp;gt;%
  group_by(word) %&amp;gt;%
  summarise(word_count = n()) %&amp;gt;%
  ungroup()

wordcloud::wordcloud(sentiment$word, sentiment$word_count, colors = c(&amp;quot;#0095A8&amp;quot;,
                                                                      &amp;quot;#112E51&amp;quot;,
                                                                      &amp;quot;#FF7043&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-24-elgl-twitter_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;want-to-play-with-the-data-too&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Want To Play With The Data Too?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jasonajones73/elgl19-twitter/master/data/tweets.csv&#34;&gt;Tweet Data CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jasonajones73/elgl19-twitter/master/data/tweets.json&#34;&gt;Tweet Data JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jasonajones73/elgl19-twitter/blob/master/data/tweets.rds?raw=true&#34;&gt;Tweet Data RDS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>I Like It When You Call Me Large SpatialPolygonsDataFrame</title>
      <link>/post/2019-03-18-elon-geospatial/</link>
      <pubDate>Tue, 19 Mar 2019 21:09:00 +0000</pubDate>
      
      <guid>/post/2019-03-18-elon-geospatial/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Welcome to the wonderful world of R-Spatial! I really enjoy playing around with spatial data in R and for some reason find it much easier than ArcGIS (#sorrynotsorry Esri). Please keep in mind, as with everything I do in R, I am self taught and rely heavily on publicly available resources. My way of doing things may not always be the best or perfect, it is just how I was able to make sense of it.&lt;/p&gt;
&lt;p&gt;One of the beautiful things about R is that there are many ways to get to your destination (in most cases). If you stumble across something in my code that is just wrong, could be way more efficient, and/or makes you cry into your cereal - please let me know! You definitely won’t hurt my feelings. I just want to get better!&lt;/p&gt;
&lt;p&gt;In this post I am going to walk through some things that I have found myself doing regularly. A majority of the data I come across does not have a spatial component to it already or may not be associated with the particular geography that I need. Hopefully, I can demonstrate for you one approach to working through this in R.&lt;/p&gt;
&lt;p&gt;The flow of this generally should be:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Pull down data with coordinates&lt;/li&gt;
&lt;li&gt;Pull down polygon data&lt;/li&gt;
&lt;li&gt;Verify overlap and matching projections&lt;/li&gt;
&lt;li&gt;Combine points and polygons&lt;/li&gt;
&lt;li&gt;Map aggressively&lt;/li&gt;
&lt;li&gt;Huzzah!&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;load-packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Load Packages&lt;/h1&gt;
&lt;p&gt;We will start by doing the obvious and loading our packages. You may notice me references some packages this way: &lt;code&gt;cowplot::plot_grid()&lt;/code&gt;. That just means that I opted not to load the entire package since I may only be using it one time. You may already know that but some of may not so just bear with me.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)
library(tidyverse)
library(sp)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-custom-theme&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Create Custom Theme&lt;/h1&gt;
&lt;p&gt;Here, I am quickly defining some thematic elements for my plots so I don’t have to repeat them. I really need to get better about doing this!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jason_theme &amp;lt;- theme(plot.title = element_text(size = 14),
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;download-police-incidents&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Download Police Incidents&lt;/h1&gt;
&lt;p&gt;I use the GeoJSON link on the &lt;a href=&#34;https://data-ral.opendata.arcgis.com/&#34;&gt;Raleigh Open Data Portal&lt;/a&gt; to download police incidents.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/elon_class/police_incidents.png&#34; /&gt;

&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;police_incidents &amp;lt;- read_sf(&amp;quot;https://opendata.arcgis.com/datasets/24c0b37fa9bb4e16ba8bcaa7e806c615_0.geojson&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-missing-coordinates&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Filter Missing Coordinates&lt;/h1&gt;
&lt;p&gt;Quickly filter records that are missing coordinates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;police_incidents &amp;lt;- police_incidents %&amp;gt;%
  filter(is.na(latitude) != TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;test-plot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Test Plot&lt;/h1&gt;
&lt;p&gt;Let’s just give it a try to make sure everything is working as intended. I am using base R here simply because it is faster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(police_incidents$geometry)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;download-wake-census-tracts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Download Wake Census Tracts&lt;/h1&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/elon_class/wake_tracts.png&#34; /&gt;

&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wake_tracts &amp;lt;- read_sf(&amp;quot;https://opendata.arcgis.com/datasets/21d4ff44498a4007beefdcbde6fcd2a9_0.geojson&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;test-plot-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Test Plot&lt;/h1&gt;
&lt;p&gt;Another base R test plot just to be sure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(wake_tracts$geometry)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-density-plot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Basic Density Plot&lt;/h1&gt;
&lt;p&gt;Great! Looks like everything is working as intended. Before I dive in to combining data, I want to show you a couple cool things you can do with these items in isolation.&lt;/p&gt;
&lt;div id=&#34;create-tibble-for-density-plotting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create Tibble for Density Plotting&lt;/h2&gt;
&lt;p&gt;In this first step, I am using &lt;code&gt;st_coordinates()&lt;/code&gt; to strip the coordinates out of my police incidents simple feature object. I am then storing those coordinates as a tibble that I can pass to my plot. This is a necessary step for the density plotting that I want to do.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dens_dat &amp;lt;- police_incidents %&amp;gt;%
  st_coordinates() %&amp;gt;%
  as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;density-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Density Map&lt;/h2&gt;
&lt;p&gt;I have everything I need now to do a quick map of the density of police incident points. Notice I use &lt;code&gt;..level..&lt;/code&gt; to access that statistic computed by the call to &lt;code&gt;stat_density_2d&lt;/code&gt;. You can read more about what is happening behind the scenes &lt;a href=&#34;https://stackoverflow.com/questions/32206623/what-does-level-mean-in-ggplotstat-density2d&#34;&gt;here&lt;/a&gt;. Gotta love the R community!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dens_dat %&amp;gt;%
  ggplot() +
  geom_sf(data = wake_tracts, color = &amp;quot;grey&amp;quot;, fill = NA) +
  stat_density_2d(aes(X, Y, fill = ..level..), geom = &amp;quot;polygon&amp;quot;, alpha = 0.6) +
  scale_fill_viridis_c(&amp;quot;Density&amp;quot;, option = &amp;quot;magma&amp;quot;, direction = -1) +
  jason_theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hexbin-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hexbin Map&lt;/h2&gt;
&lt;p&gt;Maybe that doesn’t do it for you. Well strap yourself in for a hexbin map!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dens_dat %&amp;gt;%
  ggplot() +
  geom_sf(data = wake_tracts, color = &amp;quot;grey&amp;quot;, fill = NA) +
  geom_hex(aes(X, Y), alpha = 0.6) +
  scale_fill_viridis_c(&amp;quot;Count&amp;quot;, option = &amp;quot;magma&amp;quot;, direction = -1) +
  jason_theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;a-step-further&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A Step Further&lt;/h1&gt;
&lt;p&gt;Those are a couple of quick maps you can generate with the data in isolation. Let’s take it a step further and see what we can do if we combine the data.&lt;/p&gt;
&lt;div id=&#34;convert-to-spatial-objects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Convert to Spatial Objects&lt;/h2&gt;
&lt;p&gt;The first thing I need to do is convert both of my simple feature objects to &lt;code&gt;Spatial*DataFrame&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;police_spatial &amp;lt;- police_incidents %&amp;gt;%
  filter(is.na(latitude) != TRUE) %&amp;gt;%
  as_Spatial()


wake_spatial &amp;lt;- wake_tracts %&amp;gt;%
  as_Spatial()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;check-projections&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Check Projections&lt;/h2&gt;
&lt;p&gt;Now I need to verify that my projections (Coordinated Reference Systems (CRS)) are matching.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ral_crs &amp;lt;- proj4string(police_spatial)

wake_crs &amp;lt;- proj4string(wake_spatial)


print(ral_crs == wake_crs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-overlay&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create Overlay&lt;/h2&gt;
&lt;p&gt;True means we are good to go! Now I can use &lt;code&gt;over()&lt;/code&gt; to overlay my police incident points and Wake County census tracts. It will return the census tract attributes that are associated with each police incident record. After I perform the overlay, I am simply binding everything together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;overlay &amp;lt;- over(police_spatial, wake_spatial) %&amp;gt;%
  select(GEOID10, NAMELSAD10) %&amp;gt;%
  cbind(police_spatial@data) %&amp;gt;%
  select(OBJECTID, GEOID10, NAMELSAD10)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;join-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Join Data&lt;/h2&gt;
&lt;p&gt;Now to create a nice clean simple featur object, I join by the &lt;code&gt;GEOID&lt;/code&gt;. It is really helpful for you to learn more about these identifiers and how they are constructed if you want to play more with Census data.&lt;/p&gt;
&lt;p&gt;You can learn more about them here - &lt;a href=&#34;https://www.census.gov/geo/reference/geoidentifiers.html&#34;&gt;Understanding Geographic Identifiers (GEOIDs)&lt;/a&gt;. You will see there how the identifiers are constructed from large to small components. If you are wondering whey this might be important for you, I have lost cost of how many times I have had to piece my own identifiers together from scattered data elements.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;police_incidents_final &amp;lt;- police_spatial %&amp;gt;%
  st_as_sf() %&amp;gt;%
  left_join(overlay)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;test-plot-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Test Plot&lt;/h2&gt;
&lt;p&gt;Now I am going to do a quick base R test plot to make sure that everything matched the way I intended.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(police_incidents_final[&amp;quot;GEOID10&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;what-can-you-do-with-this&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What Can You Do With This?&lt;/h1&gt;
&lt;div id=&#34;basic-relationship-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Relationship Plot&lt;/h2&gt;
&lt;p&gt;I now have some census data combined with my police incident records. Here, I am grouping my data by census tract and then creating a count of incidents by tract. After that, I throw together a quick exploratory plot of the relationship between Vacant Housing and count of police incidents. This is in no way explanatory - just exploratory. Please always do your due diligence before jumping to assumptions in exploratory analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;police_incidents_final %&amp;gt;%
  as_tibble() %&amp;gt;%
  group_by(GEOID10) %&amp;gt;%
  summarise(inc_count = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(GEOID10, inc_count) %&amp;gt;%
  right_join(wake_tracts) %&amp;gt;%
  filter(inc_count &amp;gt; 100) %&amp;gt;%
  ggplot(aes(VACANT, inc_count)) +
  geom_point() +
  geom_smooth() +
  theme_minimal() +
  labs(x = &amp;quot;Vacant Housing&amp;quot;, y = &amp;quot;Police Incident Count&amp;quot;, title = &amp;quot;Relationship Between Police Incidents and Vacant Housing&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;incident-count-by-census-tract&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Incident Count by Census Tract&lt;/h2&gt;
&lt;p&gt;Now for the good stuff (or at least I think so)! I want to create a choropleth map of Wake County that is colored based on the count of police incidents in each Census Tract.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;police_incidents_final %&amp;gt;%
  as_tibble() %&amp;gt;%
  group_by(GEOID10) %&amp;gt;%
  summarise(inc_count = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(GEOID10, inc_count) %&amp;gt;%
  right_join(wake_tracts) %&amp;gt;%
  ggplot() +
  geom_sf(aes(fill = inc_count)) +
  scale_fill_viridis_c(&amp;quot;Incident Count&amp;quot;) +
  jason_theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;assault-count-by-census-tract&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Assault Count by Census Tract&lt;/h2&gt;
&lt;p&gt;Now, I am going to go one level deeper and create a choropleth map of Wake County that is colored based on the count of police incidents categorized as ASSAULT.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;police_incidents_final %&amp;gt;%
  as_tibble() %&amp;gt;%
  filter(crime_category == &amp;quot;ASSAULT&amp;quot;) %&amp;gt;%
  group_by(GEOID10) %&amp;gt;%
  summarise(assault_count = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(GEOID10, assault_count) %&amp;gt;%
  right_join(wake_tracts) %&amp;gt;%
  ggplot() +
  geom_sf(aes(fill = assault_count)) +
  scale_fill_viridis_c(&amp;quot;Assault Count&amp;quot;) +
  jason_theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;spatial-comparison&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Spatial Comparison&lt;/h2&gt;
&lt;p&gt;What if I want to pul out two features and plot them side by side? Look no further than the &lt;code&gt;cowplot&lt;/code&gt; package!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map_1 &amp;lt;- police_incidents_final %&amp;gt;%
  as_tibble() %&amp;gt;%
  filter(crime_category == &amp;quot;ASSAULT&amp;quot;) %&amp;gt;%
  group_by(GEOID10) %&amp;gt;%
  summarise(assault_count = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  select(GEOID10, assault_count) %&amp;gt;%
  right_join(wake_tracts) %&amp;gt;%
  ggplot() +
  geom_sf(aes(fill = assault_count)) +
  scale_fill_viridis_c(&amp;quot;Assault Count&amp;quot;) +
  jason_theme

map_2 &amp;lt;- wake_tracts %&amp;gt;%
  ggplot() +
  geom_sf(aes(fill = VACANT)) +
  scale_fill_viridis_c(&amp;quot;Vacant Housing&amp;quot;) +
  jason_theme

cowplot::plot_grid(map_1, map_2, labels = &amp;quot;AUTO&amp;quot;, nrow = 1, ncol = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;google-trends&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Google Trends&lt;/h1&gt;
&lt;p&gt;I wanted to also take a second to explore something that may be more relevant for you. I am not going to walk through this in detail but want to provide it as an example of another pretty cool way you can combine and use spatial data in R.&lt;/p&gt;
&lt;p&gt;I am going to play around with some &lt;a href=&#34;https://googletrends.github.io/data/&#34;&gt;Google Trends data&lt;/a&gt; published by their &lt;a href=&#34;https://newsinitiative.withgoogle.com/training/&#34;&gt;News Lab&lt;/a&gt;. This is a pretty cool thing they do that is apparently targeted at training journalists to use Google data more effectively.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/elon_class/google.png&#34; /&gt;

&lt;/div&gt;
&lt;div id=&#34;download-data-separate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Download Data &amp;amp; Separate&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;google_dat &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/googletrends/data/master/Search_Data_US_Congressional_District_04Nov2018.csv&amp;quot;)

google_dat_rankings &amp;lt;- google_dat %&amp;gt;%
  select(1:13) %&amp;gt;%
  gather(&amp;quot;ranking&amp;quot;, &amp;quot;issue&amp;quot;, 4:13) %&amp;gt;%
  filter(State == &amp;quot;NC&amp;quot;) %&amp;gt;%
  mutate(CD115FP = str_remove_all(Code, &amp;quot;[A-Za-z-]+&amp;quot;)) %&amp;gt;%
  mutate(ranking = str_to_title(ranking))

google_dat_issues &amp;lt;- google_dat %&amp;gt;%
  select(1:3, 14:142) %&amp;gt;%
  gather(&amp;quot;other_issue&amp;quot;, &amp;quot;search_freq&amp;quot;, 4:132) %&amp;gt;%
  filter(State == &amp;quot;NC&amp;quot;) %&amp;gt;%
  mutate(CD115FP = str_remove_all(Code, &amp;quot;[A-Za-z-]+&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;top-ranked-issues-for-nc&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Top Ranked Issues For NC&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;google_dat_rankings %&amp;gt;%
  group_by(ranking, issue) %&amp;gt;%
  summarise(total = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  filter(ranking == &amp;quot;First&amp;quot;) %&amp;gt;%
  kableExtra::kable() %&amp;gt;%
  kableExtra::kable_styling(bootstrap_options = c(&amp;quot;striped&amp;quot;, &amp;quot;hover&amp;quot;), full_width = F, position = &amp;quot;left&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;width: auto !important; &#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
ranking
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
issue
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
total
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
First
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Common core
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
First
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Health care
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;congressional-districts-polygons&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Congressional Districts Polygons&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;districts &amp;lt;- tigris::congressional_districts()

districts_sf &amp;lt;- districts %&amp;gt;%
  st_as_sf() %&amp;gt;%
  filter(STATEFP == &amp;quot;37&amp;quot;)

plot(districts_sf[&amp;quot;CD115FP&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;labels-health-care-map&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Labels &amp;amp; Health Care Map&lt;/h2&gt;
&lt;p&gt;I will at least explain here that the first thing I am doing is creating a tibble of the centroids of the congressional district polygons. I am doing this so I can throw some labels on my map as points of reference.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;centroids_df &amp;lt;- districts %&amp;gt;%
  st_as_sf() %&amp;gt;%
  filter(STATEFP == &amp;quot;37&amp;quot;) %&amp;gt;%
  as_Spatial() %&amp;gt;%
  coordinates() %&amp;gt;%
  as_tibble() %&amp;gt;%
  rename(&amp;quot;Long&amp;quot; = V1, &amp;quot;Lat&amp;quot; = V2) %&amp;gt;%
  mutate(CD115FP = filter(districts@data, STATEFP == &amp;quot;37&amp;quot;)$CD115FP)

google_dat_issues %&amp;gt;%
  filter(other_issue == &amp;quot;Health care&amp;quot;) %&amp;gt;%
  select(CD115FP, search_freq) %&amp;gt;%
  right_join(districts_sf) %&amp;gt;%
  ggplot() +
  geom_sf(aes(fill = search_freq)) +
  scale_fill_viridis_c(&amp;quot;Search Frequency&amp;quot;, direction = -1) +
  geom_label(data = centroids_df, aes(Long, Lat, label = CD115FP)) +
  labs(title = &amp;quot;Google Search Frequency - Health Care&amp;quot;) +
  jason_theme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-elon-geospatial_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Spatial Exploration - MUSA Masterclass</title>
      <link>/post/2018-11-17-raleigh-police/</link>
      <pubDate>Sun, 18 Nov 2018 21:09:00 +0000</pubDate>
      
      <guid>/post/2018-11-17-raleigh-police/</guid>
      <description>


&lt;p&gt;This post was inspired by the &lt;a href=&#34;https://github.com/PennMUSA/masterclass2018&#34;&gt;MUSA Masterclass&lt;/a&gt; provided very graciously by &lt;a href=&#34;http://urbanspatialanalysis.com/&#34;&gt;Ken Steif&lt;/a&gt; and &lt;a href=&#34;http://spatial.ly/&#34;&gt;James Cheshire&lt;/a&gt;. If you aren’t familiar with the program I would strongly encourage you to check it out - &lt;a href=&#34;https://www.design.upenn.edu/musa/post/spring-18-recap&#34;&gt;UPenn MUSA Program&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to use open data from the City of Raleigh for my exploration. All data can be found on &lt;a href=&#34;http://data-ral.opendata.arcgis.com/&#34;&gt;The City of Raleigh’s open data portal&lt;/a&gt;. The primary data I am using is contained in the &lt;a href=&#34;http://data-ral.opendata.arcgis.com/datasets/raleigh-police-incidents-nibrs&#34;&gt;Raleigh Police Incidents (NIBRS)&lt;/a&gt; dataset. Each row represents a report made by a police officer.&lt;/p&gt;
&lt;div id=&#34;load-required-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load Required Packages&lt;/h2&gt;
&lt;p&gt;Trying to keep it as simple as possible while leveraging some tidyverse tricks I’ve been trying to learn. Forcing myself to use them seems to be a good idea.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)
library(tidyverse)
library(RANN2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;retrieve-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Retrieve Data&lt;/h2&gt;
&lt;p&gt;Would strongly recommend downloading this data and reading from your computer. Here I am reading the data directly from the GeoJSON API endpoints.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raleigh_police &amp;lt;- read_sf(&amp;quot;https://opendata.arcgis.com/datasets/24c0b37fa9bb4e16ba8bcaa7e806c615_0.geojson&amp;quot;)

wake_police_dpts &amp;lt;- read_sf(&amp;quot;https://opendata.arcgis.com/datasets/23094dc3a7b84682898c0a2c27290066_0.geojson&amp;quot;)

raleigh_limits &amp;lt;- read_sf(&amp;quot;https://opendata.arcgis.com/datasets/4303065aa95441308cc7224cf6246782_0.geojson&amp;quot;) %&amp;gt;%
  
  filter(LONG_NAME == &amp;quot;RALEIGH&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-missing-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filter Missing Data&lt;/h2&gt;
&lt;p&gt;To prevent some problems down the road, I am filtering out all incidents that are missing spatial attributes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raleigh_police &amp;lt;- raleigh_police %&amp;gt;%
  filter(is.na(latitude) != TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;test-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Test Plots&lt;/h2&gt;
&lt;p&gt;Just throwing out some quick test plots to make sure everything is working as anticipated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(raleigh_police$geometry, col = &amp;quot;grey&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(wake_police_dpts$geometry, col = &amp;quot;grey&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;check-for-matching-projection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Check for matching projection&lt;/h2&gt;
&lt;p&gt;Checking for matching projections for plotting and k nearest neighbor clustering.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;st_crs(raleigh_police)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: &amp;quot;+proj=longlat +datum=WGS84 +no_defs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;st_crs(wake_police_dpts)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coordinate Reference System:
##   EPSG: 4326 
##   proj4string: &amp;quot;+proj=longlat +datum=WGS84 +no_defs&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-nested-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create Nested Tibble&lt;/h2&gt;
&lt;p&gt;Here I am nesting the data by crime description so I can apply the clustering function. This creates a column of tibbles for each crime description which will become important as we try to distinguish densities in later steps.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raleigh_police_nested &amp;lt;- raleigh_police %&amp;gt;%
  group_by(crime_description) %&amp;gt;%
  nest()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-clustering-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create Clustering Function&lt;/h2&gt;
&lt;p&gt;Next, I wrote a function to apply to my column of tibbles. I am using the &lt;code&gt;nn2&lt;/code&gt; function from the &lt;code&gt;RANN2&lt;/code&gt; package to perform k nearest neighbor clustering. This function clusters points by law enforcement stations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f &amp;lt;- function(dat) {
  nn2(st_coordinates(wake_police_dpts), st_coordinates(dat), k =1) %&amp;gt;%
    data.frame() %&amp;gt;%
    as_tibble() %&amp;gt;%
    group_by(nn.idx) %&amp;gt;%
    summarise(cnt = n()) %&amp;gt;%
    right_join(wake_police_dpts, by = c(&amp;quot;nn.idx&amp;quot; = &amp;quot;OBJECTID&amp;quot;)) %&amp;gt;%
    select(-nn.idx) %&amp;gt;%
    filter(is.na(cnt) != TRUE)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;map-clustering-function-to-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Map Clustering Function to Tibble&lt;/h2&gt;
&lt;p&gt;Next, I leverage the &lt;code&gt;purrr&lt;/code&gt; package to map the function to the column of tibbles to create a new column of tibbles containing counts by law enforcement stations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raleigh_police_nested &amp;lt;- raleigh_police_nested %&amp;gt;%
  mutate(closest = purrr::map(.x = data, .f = ~f(.x)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;define-crime-description&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Define Crime Description&lt;/h2&gt;
&lt;p&gt;Now we are ready to explore the results. The thought here is potentially a &lt;code&gt;shiny&lt;/code&gt; application where you could specify a crime description and produce a series of informative plots. I start by defining a new object, &lt;code&gt;crime_des&lt;/code&gt;, to filter for only Traffic/DWI Incidents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crime_des &amp;lt;- &amp;quot;Traffic/DWI (Driving While Impaired)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-nested-tibble&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extract Nested Tibble&lt;/h2&gt;
&lt;p&gt;Here, I am creating two new objects for plotting based on the crime description I just specified.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- raleigh_police_nested %&amp;gt;%
  filter(crime_description == crime_des) %&amp;gt;%
  .$closest %&amp;gt;%
  .[[1]] %&amp;gt;%
  st_as_sf()

# Also creating secondary object for density plots
dat2 &amp;lt;- raleigh_police %&amp;gt;%
  filter(crime_description == crime_des) %&amp;gt;%
  st_coordinates() %&amp;gt;%
  as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;density-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Density Plot&lt;/h2&gt;
&lt;p&gt;Now for the fun! First is a density map of Traffic/DWI incidents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat2 %&amp;gt;%
  ggplot() +
  geom_sf(data = raleigh_limits, color = &amp;quot;grey&amp;quot;, fill = NA) +
  stat_density_2d(aes(X, Y, fill = ..level..), geom = &amp;quot;polygon&amp;quot;, alpha = 0.6) +
  viridis::scale_fill_viridis(option = &amp;quot;magma&amp;quot;, direction = -1, name = &amp;quot;Density&amp;quot;) +
  labs(title = sprintf(&amp;quot;Density of %s Incidents in Raleigh, NC&amp;quot;, crime_des),
       caption = &amp;quot;Author: Jason Jones \nSource: http://data-ral.opendata.arcgis.com/&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        plot.title = element_text(size = 14),
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hexbin-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hexbin Plot&lt;/h2&gt;
&lt;p&gt;Next is a Hexbin map of Traffic/DWI Incidents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat2 %&amp;gt;%
  ggplot() +
  geom_sf(data = raleigh_limits, color = &amp;quot;grey&amp;quot;, fill = NA) +
  geom_hex(aes(X,Y), alpha = 0.6) +
  viridis::scale_fill_viridis(option = &amp;quot;magma&amp;quot;, direction = -1, name = &amp;quot;Density&amp;quot;) +
  labs(title = sprintf(&amp;quot;Density of %s Incidents in Raleigh, NC&amp;quot;, crime_des),
       caption = &amp;quot;Author: Jason Jones \nSource: http://data-ral.opendata.arcgis.com/&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        plot.title = element_text(size = 14),
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clustering-by-police-stations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Clustering By Police Stations&lt;/h2&gt;
&lt;p&gt;Finally, is a map of law enforcement stations where the count of clustered incidents is mapped to the size of the point.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat %&amp;gt;%
  st_coordinates() %&amp;gt;%
  as_tibble() %&amp;gt;%
  mutate(cnt = dat$cnt, AGENCY = dat$AGENCY) %&amp;gt;%
  ggplot() +
  geom_sf(data = raleigh_limits, color = &amp;quot;grey&amp;quot;, fill = NA) +
  geom_point(aes(X, Y, size = cnt, color = AGENCY), alpha = 0.8) +
  scale_color_brewer(palette = &amp;quot;Spectral&amp;quot;, direction = -1, name = &amp;quot;Agency&amp;quot;) +
  scale_size(name = &amp;quot;Count of Incidents&amp;quot;) +
  labs(title = sprintf(&amp;quot;Clustering of %s Incidents by LE Stations&amp;quot;, crime_des),
       caption = &amp;quot;Author: Jason Jones \nSource: http://data-ral.opendata.arcgis.com/&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        plot.title = element_text(size = 14),
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Maybe one more time just for fun!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;define-crime-description-again&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Define Crime Description Again&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crime_des &amp;lt;- &amp;quot;Assault/Simple&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-nested-tibble-again&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extract Nested Tibble Again&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- raleigh_police_nested %&amp;gt;%
  filter(crime_description == crime_des) %&amp;gt;%
  .$closest %&amp;gt;%
  .[[1]] %&amp;gt;%
  st_as_sf()

# Also creating secondary object for density plots
dat2 &amp;lt;- raleigh_police %&amp;gt;%
  filter(crime_description == crime_des) %&amp;gt;%
  st_coordinates() %&amp;gt;%
  as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;density-plot-again&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Density Plot Again&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat2 %&amp;gt;%
  ggplot() +
  geom_sf(data = raleigh_limits, color = &amp;quot;grey&amp;quot;, fill = NA) +
  stat_density_2d(aes(X, Y, fill = ..level..), geom = &amp;quot;polygon&amp;quot;, alpha = 0.6) +
  viridis::scale_fill_viridis(option = &amp;quot;magma&amp;quot;, direction = -1, name = &amp;quot;Density&amp;quot;) +
  labs(title = sprintf(&amp;quot;Density of %s Incidents in Raleigh, NC&amp;quot;, crime_des),
       caption = &amp;quot;Author: Jason Jones \nSource: http://data-ral.opendata.arcgis.com/&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        plot.title = element_text(size = 14),
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hexbin-plot-again&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hexbin Plot Again&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat2 %&amp;gt;%
  ggplot() +
  geom_sf(data = raleigh_limits, color = &amp;quot;grey&amp;quot;, fill = NA) +
  geom_hex(aes(X,Y), alpha = 0.6) +
  viridis::scale_fill_viridis(option = &amp;quot;magma&amp;quot;, direction = -1, name = &amp;quot;Density&amp;quot;) +
  labs(title = sprintf(&amp;quot;Density of %s Incidents in Raleigh, NC&amp;quot;, crime_des),
       caption = &amp;quot;Author: Jason Jones \nSource: http://data-ral.opendata.arcgis.com/&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        plot.title = element_text(size = 14),
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;clustering-by-police-stations-again&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Clustering By Police Stations Again&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat %&amp;gt;%
  st_coordinates() %&amp;gt;%
  as_tibble() %&amp;gt;%
  mutate(cnt = dat$cnt, AGENCY = dat$AGENCY) %&amp;gt;%
  ggplot() +
  geom_sf(data = raleigh_limits, color = &amp;quot;grey&amp;quot;, fill = NA) +
  geom_point(aes(X, Y, size = cnt, color = AGENCY), alpha = 0.8) +
  scale_color_brewer(palette = &amp;quot;Spectral&amp;quot;, direction = -1, name = &amp;quot;Agency&amp;quot;) +
  scale_size(name = &amp;quot;Count of Incidents&amp;quot;) +
  labs(title = sprintf(&amp;quot;Clustering of %s Incidents by LE Stations&amp;quot;, crime_des),
       caption = &amp;quot;Author: Jason Jones \nSource: http://data-ral.opendata.arcgis.com/&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        plot.title = element_text(size = 14),
        panel.background = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-17-raleigh-police_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I really appreciate the class taught by James Cheshire even though this is a little bit of a deviation from clustering to roads. I am thinking something like this could be suited for a &lt;code&gt;shiny&lt;/code&gt; application. Not sure if I will ever get around to making that happen.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Age Is Just A Number…Statistically Speaking</title>
      <link>/post/2018-11-12-crime-age-stats/</link>
      <pubDate>Mon, 12 Nov 2018 21:09:00 +0000</pubDate>
      
      <guid>/post/2018-11-12-crime-age-stats/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bulk_dat &amp;lt;- read_csv(&amp;quot;https://www.dallasopendata.com/api/views/ftja-9jxd/rows.csv&amp;quot;,
                     col_types = cols(offensereportingofficerbadge2 = col_character(),
                                      offensebeat = col_character())) %&amp;gt;%
  mutate(offensedate = as.Date(offensedate, format = &amp;quot;%m/%d/%Y&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bulk_dat &amp;lt;- bulk_dat %&amp;gt;%
  mutate(hour = hour(offensetimeofoccurence2)) %&amp;gt;%
  mutate(age = as.integer(offenseage)) %&amp;gt;%
  mutate(month = month(offensedate))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bulk_dat %&amp;gt;%
  ggplot(aes(age)) +
  geom_histogram(aes(y = ..density..),
                 binwidth = 5, color = &amp;quot;black&amp;quot;, fill = &amp;quot;white&amp;quot;) +
  geom_density(alpha = .2, fill = &amp;quot;blue&amp;quot;) +
  geom_vline(aes(xintercept = mean(age, na.rm = TRUE)), color = &amp;quot;red&amp;quot;, linetype = &amp;quot;dashed&amp;quot;, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-12-crime-age-stats_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bulk_dat %&amp;gt;%
  ggplot(aes(hour)) +
  geom_histogram(aes(y = ..density..),
                 binwidth = 2, color = &amp;quot;black&amp;quot;, fill = &amp;quot;white&amp;quot;) +
  geom_density(alpha = .2, fill = &amp;quot;blue&amp;quot;) +
  geom_vline(aes(xintercept = mean(hour, na.rm = TRUE)), color = &amp;quot;red&amp;quot;, linetype = &amp;quot;dashed&amp;quot;, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-12-crime-age-stats_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bulk_dat %&amp;gt;%
  ggplot(aes(month)) +
  geom_histogram(aes(y = ..density..),
                 binwidth = 1, color = &amp;quot;black&amp;quot;, fill = &amp;quot;white&amp;quot;) +
  geom_density(alpha = .2, fill = &amp;quot;blue&amp;quot;) +
  geom_vline(aes(xintercept = mean(month, na.rm = TRUE)), color = &amp;quot;red&amp;quot;, linetype = &amp;quot;dashed&amp;quot;, size = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-12-crime-age-stats_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Health and Economic Impact of Storms and Severe Weather Events</title>
      <link>/post/2018-09-02-reproducible-research/</link>
      <pubDate>Sun, 02 Sep 2018 21:09:00 +0000</pubDate>
      
      <guid>/post/2018-09-02-reproducible-research/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;synopsis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Synopsis&lt;/h2&gt;
&lt;p&gt;In this analysis I amd concerned with two primary points. Which event types have the greatest health impact and the greatest economic impact. I begin my work with data processing to create usable objects for results visualization. I finish my analysis with two plots and a final table.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;package-load&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Package Load&lt;/h2&gt;
&lt;p&gt;Load packages required for analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(tidyverse)
require(lubridate)
require(kableExtra)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-import&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Import&lt;/h2&gt;
&lt;p&gt;Leveraging &lt;code&gt;read_csv&lt;/code&gt; from the &lt;code&gt;readr&lt;/code&gt; packackge included with &lt;code&gt;tidyverse&lt;/code&gt; to import the dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weather_dat = read_csv(&amp;quot;data/repdata%2Fdata%2FStormData.csv.bz2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-processing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Processing&lt;/h2&gt;
&lt;p&gt;The first thing I want to do is convert &lt;code&gt;BGN_DATE&lt;/code&gt; to a usable longitudinal variable. I am doing this so I can provide change-over-time information as I attempt to answer both questions presented. I am storing the result as a new object so I don’t mess with my original data import object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_dat = weather_dat %&amp;gt;%
  mutate(BGN_DATE = str_trim(str_extract(BGN_DATE, &amp;quot;^\\S+\\s+&amp;quot;))) %&amp;gt;%
  mutate(BGN_DATE = as.POSIXct(BGN_DATE, format = &amp;quot;%m/%d/%Y&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also want to select the most recent ten years of data. Even though there are data points from 1950-01-03 to 2011-11-30, there are a lot of gaps in data collection the farther back you go.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_dat = new_dat %&amp;gt;%
  filter(year(BGN_DATE) &amp;gt;= (year(max(BGN_DATE)) - 10))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;question-1-processing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Question 1 Processing&lt;/h3&gt;
&lt;p&gt;I want to attempt to provide my version of an answer to question 1 in three steps. This section will deal with data processing and later I will work through visual creation. The first thing I am doing is creating a fatalities object representative of the top 10 fatality causing event types.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_1_fat = new_dat %&amp;gt;%
  group_by(EVTYPE) %&amp;gt;%
  summarise(fatalities_count = sum(FATALITIES)) %&amp;gt;%
  ungroup() %&amp;gt;%
  top_n(10, fatalities_count)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to create an injuries object representative of the top 10 injury causing event types. You will notice this step is just a simple modification of the first.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_1_inj = new_dat %&amp;gt;%
  group_by(EVTYPE) %&amp;gt;%
  summarise(injury_count = sum(INJURIES)) %&amp;gt;%
  ungroup() %&amp;gt;%
  top_n(10, injury_count)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The third and final step starts by filtering for event types that are common between &lt;code&gt;quest_1_fat&lt;/code&gt; and &lt;code&gt;quest_1_inj&lt;/code&gt;, then consolidates data points by month, sums up injuries and fatalities by event type, and then finally gathers injuries and fatalities into one variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_1_final = new_dat %&amp;gt;%
  filter(EVTYPE %in% quest_1_fat$EVTYPE &amp;amp; EVTYPE %in% quest_1_inj$EVTYPE) %&amp;gt;%
  mutate(BGN_DATE = floor_date(BGN_DATE, unit = &amp;quot;1 month&amp;quot;)) %&amp;gt;%
  group_by(BGN_DATE, EVTYPE) %&amp;gt;%
  summarise_at(c(&amp;quot;INJURIES&amp;quot;, &amp;quot;FATALITIES&amp;quot;), sum) %&amp;gt;%
  ungroup() %&amp;gt;%
  gather(&amp;quot;measure&amp;quot;, &amp;quot;count&amp;quot;, 3:4)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;question-2-processing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Question 2 Processing&lt;/h3&gt;
&lt;p&gt;To begin question two, I am writing a function to help me convert the character values for thousand, million, and billion to their numeric value as a multiplier for the &lt;code&gt;PROPDMG&lt;/code&gt; and &lt;code&gt;CROPDMG&lt;/code&gt; variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f = function(dat) {
  if(dat == &amp;quot;K&amp;quot;) {
    1000
  } else if (dat == &amp;quot;M&amp;quot;) {
    1000000
  } else if (dat == &amp;quot;B&amp;quot;) {
    1000000000
  } else {
    NA
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I filter out &lt;code&gt;NA&lt;/code&gt; values for property and crop damage, create two new variables that replace the character values with integer multipliers, and then calculate actual property and crop damage values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_dat = new_dat %&amp;gt;%
  filter(is.na(PROPDMGEXP) == FALSE) %&amp;gt;%
  filter(is.na(CROPDMGEXP) == FALSE) %&amp;gt;%
  mutate(prop_mult = as.integer(map_chr(.x = PROPDMGEXP, .f = f))) %&amp;gt;%
  mutate(crop_mult = as.integer(map_chr(.x = CROPDMGEXP, .f = f))) %&amp;gt;%
  mutate(prop_dmg = PROPDMG * prop_mult) %&amp;gt;%
  mutate(crop_dmg = CROPDMG * crop_mult)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Very similar to question one, I am now going to look at the top ten event types by total property damage over the last ten years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_2_prop = new_dat %&amp;gt;%
  group_by(EVTYPE) %&amp;gt;%
  summarise(total_dmg = sum(prop_dmg)) %&amp;gt;%
  ungroup() %&amp;gt;%
  top_n(10, total_dmg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here again, I am creating an object that has the top ten event types by total crop damage over the last ten years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_2_crop = new_dat %&amp;gt;%
  group_by(EVTYPE) %&amp;gt;%
  summarise(total_dmg = sum(crop_dmg)) %&amp;gt;%
  ungroup() %&amp;gt;%
  top_n(10, total_dmg)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a final step, I am creating an object that filters for only event types that occur in both top ten lists and then calculates total property and crop damage over time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_2_final = new_dat %&amp;gt;%
filter(EVTYPE %in% quest_2_prop$EVTYPE &amp;amp; EVTYPE %in% quest_2_crop$EVTYPE) %&amp;gt;%
  mutate(BGN_DATE = floor_date(BGN_DATE, unit = &amp;quot;1 month&amp;quot;)) %&amp;gt;%
  group_by(BGN_DATE, EVTYPE) %&amp;gt;%
  summarise_at(c(&amp;quot;prop_dmg&amp;quot;, &amp;quot;crop_dmg&amp;quot;), sum) %&amp;gt;%
  ungroup() %&amp;gt;%
  gather(&amp;quot;measure&amp;quot;, &amp;quot;total_dmg&amp;quot;, 3:4)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;div id=&#34;question-1-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Question 1 Results&lt;/h3&gt;
&lt;p&gt;The goal of this plot is to show the most impactful event types over the past ten years. For this, I am using a faceted &lt;code&gt;ggplot&lt;/code&gt; column visualization.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_1_final %&amp;gt;%
  ggplot(aes(as.character(year(BGN_DATE)), count, fill = measure)) +
  geom_col() +
  facet_wrap(~EVTYPE, scales = &amp;quot;free_y&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        legend.position = &amp;quot;bottom&amp;quot;,
        axis.text.x = element_text(angle = 90, vjust = 0.5),
        axis.title = element_blank(),
        panel.background = element_blank(),
        strip.background = element_rect(fill = &amp;quot;#146a90&amp;quot;),
        strip.text = element_text(color = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;)) +
  scale_fill_viridis_d(&amp;quot;&amp;quot;, direction = -1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-09-02-reproducible-research_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;question-2-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Question 2 Results&lt;/h3&gt;
&lt;p&gt;As with question one, the goal of this plot is to show the most impactful event types over the past ten years in terms of property and crop damage. For this, I am using a faceted &lt;code&gt;ggplot&lt;/code&gt; column visualization that is modeled after the question one plot for consistency.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quest_2_final %&amp;gt;%
  ggplot(aes(as.character(year(BGN_DATE)), total_dmg/1000000, fill = measure)) +
  geom_col() +
  facet_wrap(~EVTYPE, scales = &amp;quot;free_y&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Roboto&amp;quot;),
        legend.position = &amp;quot;bottom&amp;quot;,
        axis.text.x = element_text(angle = 90, vjust = 0.5),
        axis.title.x = element_blank(),
        panel.background = element_blank(),
        strip.background = element_rect(fill = &amp;quot;#146a90&amp;quot;),
        strip.text = element_text(color = &amp;quot;white&amp;quot;, face = &amp;quot;bold&amp;quot;)) +
  labs(y = &amp;quot;Total Damage (millions)&amp;quot;) +
  scale_fill_viridis_d(&amp;quot;&amp;quot;, direction = -1, labels = c(&amp;quot;Crop Damage&amp;quot;, &amp;quot;Property Damage&amp;quot;)) +
  scale_y_continuous(labels = scales::dollar_format())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-09-02-reproducible-research_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;overall&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Overall&lt;/h3&gt;
&lt;p&gt;What about the worst in terms of economic impact and health? If you look at both question one and two results you will find only one event type consistent between both.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_dat %&amp;gt;%
  filter(EVTYPE %in% quest_1_fat$EVTYPE &amp;amp;
           EVTYPE %in% quest_1_inj$EVTYPE &amp;amp;
           EVTYPE %in% quest_2_prop$EVTYPE &amp;amp;
           EVTYPE %in% quest_2_crop$EVTYPE) %&amp;gt;%
  group_by(EVTYPE) %&amp;gt;%
  summarise_at(c(&amp;quot;INJURIES&amp;quot;, &amp;quot;FATALITIES&amp;quot;, &amp;quot;CROPDMG&amp;quot;, &amp;quot;PROPDMG&amp;quot;), sum) %&amp;gt;%
  kable(format = &amp;quot;html&amp;quot;,
        align = &amp;quot;lcccc&amp;quot;,
        col.names = c(&amp;quot;Event Type&amp;quot;, &amp;quot;Injuries&amp;quot;, &amp;quot;Fatalities&amp;quot;, &amp;quot;Crop Damage&amp;quot;, &amp;quot;Property Damage&amp;quot;),
        format.args = list(big.mark = &amp;quot;,&amp;quot;)) %&amp;gt;%
  kable_styling(full_width = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Event Type
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
Injuries
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
Fatalities
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
Crop Damage
&lt;/th&gt;
&lt;th style=&#34;text-align:center;&#34;&gt;
Property Damage
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
THUNDERSTORM WIND
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
1,400
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
130
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
66,663
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
862,257.4
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 -0400</pubDate>
      
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Government Open Data</title>
      <link>/talk/open-data/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 -0400</pubDate>
      
      <guid>/talk/open-data/</guid>
      <description></description>
    </item>
    
    <item>
      <title>City of Raleigh Budget Sentiment Analysis</title>
      <link>/post/2018-04-29-raleigh-sentiment/</link>
      <pubDate>Sun, 29 Apr 2018 21:09:00 +0000</pubDate>
      
      <guid>/post/2018-04-29-raleigh-sentiment/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;package-import&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Package Import&lt;/h2&gt;
&lt;p&gt;Load necessary packages and set one global option.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(pdftools)
library(tidytext)
library(knitr)
library(kableExtra)

options(stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;retrieve-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Retrieve File&lt;/h2&gt;
&lt;p&gt;Download the file from the City of Raleigh website, read that file in as a character vector, and delete the downloaded file from the directory.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://www.raleighnc.gov/content/BudgetManagement/Documents/Budget/Archive/2018/FY2018AdoptedBudget20160612.pdf&amp;quot;,
              &amp;quot;FY2018AdoptedBudget.pdf&amp;quot;,
              mode = &amp;quot;wb&amp;quot;)

txt = pdf_text(&amp;quot;FY2018AdoptedBudget.pdf&amp;quot;)

unlink(&amp;quot;FY2018AdoptedBudget.pdf&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-data-frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create Data Frame&lt;/h2&gt;
&lt;p&gt;Create a page number character vector, create a data frame by binding the page number character vector with the extracted text, and finally “unnest” all of the page text into individual words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;page = as.character(1:length(txt))

df = data.frame(cbind(page, txt))

budget_words = df %&amp;gt;%
  unnest_tokens(word, txt)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;cleaning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cleaning&lt;/h2&gt;
&lt;p&gt;Remove stop words and save as clean object, join sentiment lexicon with clean object, and group the object by page and sentiments before summarising.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cleaned = budget_words %&amp;gt;%
  anti_join(stop_words)

sentiment = cleaned %&amp;gt;%
  inner_join(get_sentiments(&amp;quot;nrc&amp;quot;))

sent_count = sentiment %&amp;gt;%
  group_by(page, sentiment) %&amp;gt;%
  summarise(sent_count = n()) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(page = as.integer(page))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualize&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualize&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-29-raleigh-sentiment_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;negative-word-table&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Negative Word Table&lt;/h2&gt;
&lt;table class=&#34;table table-striped table-hover&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Word
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Word Count
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
APPROPRIATION
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
77
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
BONDS
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
DEBT
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
219
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
EMERGENCY
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
EXPENDITURE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
123
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FEE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
136
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
INCOME
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
RISK
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TAX
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
153
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
WASTE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;trust-word-table&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Trust Word Table&lt;/h2&gt;
&lt;table class=&#34;table table-hover&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Word
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
Word Count
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
BUDGET
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
400
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
CENTER
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
196
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
COUNCIL
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
173
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
GRANT
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
IMPROVEMENT
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
93
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
MANAGEMENT
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
165
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ORDINANCE
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
PLANNING
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
77
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
RESOURCES
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
105
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SYSTEM
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
101
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>I Have to Ask You</title>
      <link>/publication/i-have-to-ask-you/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/publication/i-have-to-ask-you/</guid>
      <description></description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 -0400</pubDate>
      
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 -0400</pubDate>
      
      <guid>/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
